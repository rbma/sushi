// Generated by CoffeeScript 1.7.1
'use strict';
var sushiServices;

sushiServices = angular.module('sushiServices', []);

sushiServices.factory('brightCoveService', [
  '$rootScope', '$window', function($rootScope, $window) {
    var APIModules, addPlayer, height, init, modVP, player, playerData, playerTemplate, resize, vidRatio, videoContainer, videoPlayer, width;
    playerData = {};
    playerTemplate = "";
    player = {};
    APIModules = {};
    modVP = {};
    videoPlayer = {};
    vidRatio = 640 / 360;
    videoContainer = {};
    width = $(window).width() / 1.5;
    height = ($(window).width() / 1.5) / vidRatio;
    window.onTemplateLoad = function(experienceID) {
      player = brightcove.api.getExperience(experienceID);
      APIModules = brightcove.api.modules.APIModules;
      return modVP = player.getModule(brightcove.api.modules.APIModules.VIDEO_PLAYER);
    };
    resize = function() {
      var newHeight, newWidth;
      newWidth = $(window).width() / 1.5;
      newHeight = ($(window).width() / 1.5) / vidRatio;
      videoContainer.attr("width", newWidth);
      return videoContainer.attr("height", newHeight);
    };
    window.onTemplateReady = function(evt) {
      videoPlayer = player.getModule(APIModules.VIDEO_PLAYER);
      $rootScope.$broadcast('playerready', videoPlayer);
      videoContainer = $('#myExperience');
      window.addEventListener('resize', resize, true);
      modVP.addEventListener(brightcove.api.events.MediaEvent.BEGIN, onMediaEventFired);
      modVP.addEventListener(brightcove.api.events.MediaEvent.CHANGE, onMediaEventFired);
      modVP.addEventListener(brightcove.api.events.MediaEvent.COMPLETE, onMediaEventFired);
      modVP.addEventListener(brightcove.api.events.MediaEvent.ERROR, onMediaEventFired);
      modVP.addEventListener(brightcove.api.events.MediaEvent.PLAY, onMediaEventFired);
      return modVP.addEventListener(brightcove.api.events.MediaEvent.STOP, onMediaEventFired);
    };
    addPlayer = function() {
      var playerHTML, template;
      template = Handlebars.compile(playerTemplate);
      playerHTML = template(playerData);
      document.getElementById('player').innerHTML = playerHTML;
      return brightcove.createExperiences();
    };
    init = function(videoId) {
      playerData = {
        "playerID": "1890493041001",
        "playerKey": "AQ~~%2CAAABuJ3Komk~%2CgXybzBdQzgLgC0zHvAZXtMeryIVplW-t",
        "width": width,
        "height": height,
        "videoID": "" + videoId
      };
      playerTemplate = "<div style=\"display:none\"></div><object id=\"myExperience\" class=\"BrightcoveExperience\"><param name=\"bgcolor\" value=\"#FFFFFF\" /><param name=\"width\" value=\"{{width}}\" /><param name=\"height\" value=\"{{height}}\" /><param name=\"playerID\" value=\"{{playerID}}\" /><param name=\"playerKey\" value=\"{{playerKey}}\" /><param name=\"isSlim\" value=\"true\" /><param name=\"autoStart\" value=\"false\" /><param name=\"isVid\" value=\"true\" /><param name=\"isUI\" value=\"true\" /><param name=\"dynamicStreaming\" value=\"true\" /><param name=\"@videoPlayer\" value=\"{{videoID}}\"; /><param name=\"includeAPI\" value=\"true\" /><param name=\"linkBaseURL\" value=\"http://www.redbullmusicacademy.com/magazine/sushi-sequencer\"/><param name=\"templateLoadHandler\" value=\"onTemplateLoad\" /><param name=\"templateReadyHandler\" value=\"onTemplateReady\" /></object>";
      return addPlayer();
    };
    return {
      init: function(videoId) {
        return init(videoId);
      }
    };
  }
]);

sushiServices.factory('webgl', function() {
  var supportsWebGL;
  supportsWebGL = function() {
    var canvas, e, webgl;
    canvas = document.createElement('canvas');
    webgl = false;
    try {
      webgl = !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
    } catch (_error) {
      e = _error;
    }
    return webgl;
  };
  return {
    checkWebGL: function() {
      return supportsWebGL();
    }
  };
});
